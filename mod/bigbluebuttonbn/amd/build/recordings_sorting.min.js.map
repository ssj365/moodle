{"version":3,"file":"recordings_sorting.min.js","sources":["../src/recordings_sorting.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Sorting module for the recordings table.\n *\n * @module     mod_bigbluebuttonbn/recordings_sorting\n * @copyright  2025 Blindside Networks\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Stores sorting order state for each column.\n * @type {Object}\n */\nconst sortOrders = {name: true, description: true, date: true};\n\n/**\n * Sorts the table rows based on the selected column.\n *\n * @param {string} column - The column to sort by.\n */\nexport const sortTable = (column) => {\n    const tableContainer = document.querySelector(\".mod_bigbluebuttonbn_recordings_table\");\n    if (!tableContainer) {\n        return;\n    }\n\n    const rows = Array.from(tableContainer.querySelectorAll(\".row.mb-3.align-items-center\"));\n\n    rows.sort((rowA, rowB) => {\n        let valueA, valueB;\n\n        if (column === \"date\") {\n            const dateAElement = rowA.querySelector(\".col-md-2[data-sort='date']\");\n            const dateBElement = rowB.querySelector(\".col-md-2[data-sort='date']\");\n\n            if (!dateAElement || !dateBElement) {\n                return 0;\n            }\n\n            const dateA = parseDate(dateAElement.textContent.trim());\n            const dateB = parseDate(dateBElement.textContent.trim());\n\n            return sortOrders[column] ? dateA - dateB : dateB - dateA;\n        } else {\n            const columnSelector = `.col-md-${column === \"name\" ? 1 : 2}[data-sort='${column}']`;\n            const elementA = rowA.querySelector(columnSelector);\n            const elementB = rowB.querySelector(columnSelector);\n\n            if (!elementA || !elementB) {\n                return 0;\n            }\n\n            valueA = elementA.textContent.trim().toLowerCase();\n            valueB = elementB.textContent.trim().toLowerCase();\n\n            return sortOrders[column] ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);\n        }\n    });\n\n    rows.forEach(row => {\n        tableContainer.appendChild(row);\n    });\n\n    sortOrders[column] = !sortOrders[column];\n\n    updateSortIcons(column);\n};\n\n/**\n * Parses a date string and returns a timestamp for sorting.\n *\n * @param {string} dateString - The date string to parse.\n * @returns {number} The timestamp value of the parsed date.\n */\nexport const parseDate = (dateString) => {\n    const parsedDate = Date.parse(dateString);\n    return isNaN(parsedDate) ? 0 : parsedDate;\n};\n\n/**\n * Updates the sorting icons on table headers.\n *\n * @param {string} activeColumn - The column currently being sorted.\n */\nexport const updateSortIcons = (activeColumn) => {\n    document.querySelectorAll(\".sortable-header .sort-icon\").forEach(icon => {\n        icon.textContent = \"▲\";\n    });\n\n    const activeHeader = document.querySelector(`.sortable-header[data-sort=\"${activeColumn}\"] .sort-icon`);\n    if (activeHeader) {\n        activeHeader.textContent = sortOrders[activeColumn] ? \"▲\" : \"▼\";\n    }\n};\n"],"names":["sortOrders","name","description","date","column","tableContainer","document","querySelector","rows","Array","from","querySelectorAll","sort","rowA","rowB","valueA","valueB","dateAElement","dateBElement","dateA","parseDate","textContent","trim","dateB","columnSelector","elementA","elementB","toLowerCase","localeCompare","forEach","row","appendChild","updateSortIcons","dateString","parsedDate","Date","parse","isNaN","activeColumn","icon","activeHeader"],"mappings":";;;;;;;;MA2BMA,WAAa,CAACC,MAAM,EAAMC,aAAa,EAAMC,MAAM,sBAO/BC,eAChBC,eAAiBC,SAASC,cAAc,6CACzCF,4BAICG,KAAOC,MAAMC,KAAKL,eAAeM,iBAAiB,iCAExDH,KAAKI,MAAK,CAACC,KAAMC,YACTC,OAAQC,UAEG,SAAXZ,OAAmB,OACba,aAAeJ,KAAKN,cAAc,+BAClCW,aAAeJ,KAAKP,cAAc,mCAEnCU,eAAiBC,oBACX,QAGLC,MAAQC,UAAUH,aAAaI,YAAYC,QAC3CC,MAAQH,UAAUF,aAAaG,YAAYC,eAE1CtB,WAAWI,QAAUe,MAAQI,MAAQA,MAAQJ,MACjD,OACGK,iCAAuC,SAAXpB,OAAoB,EAAI,yBAAgBA,aACpEqB,SAAWZ,KAAKN,cAAciB,gBAC9BE,SAAWZ,KAAKP,cAAciB,uBAE/BC,UAAaC,UAIlBX,OAASU,SAASJ,YAAYC,OAAOK,cACrCX,OAASU,SAASL,YAAYC,OAAOK,cAE9B3B,WAAWI,QAAUW,OAAOa,cAAcZ,QAAUA,OAAOY,cAAcb,SANrE,MAUnBP,KAAKqB,SAAQC,MACTzB,eAAe0B,YAAYD,QAG/B9B,WAAWI,SAAWJ,WAAWI,QAEjC4B,gBAAgB5B,eASPgB,UAAaa,mBAChBC,WAAaC,KAAKC,MAAMH,mBACvBI,MAAMH,YAAc,EAAIA,+CAQtBF,gBAAmBM,eAC5BhC,SAASK,iBAAiB,+BAA+BkB,SAAQU,OAC7DA,KAAKlB,YAAc,aAGjBmB,aAAelC,SAASC,oDAA6C+B,+BACvEE,eACAA,aAAanB,YAAcrB,WAAWsC,cAAgB,IAAM"}