{"version":3,"file":"recordings_pagination.min.js","sources":["../src/recordings_pagination.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Pagination module for the recordings table.\n *\n * @module     mod_bigbluebuttonbn/recordings_pagination\n * @copyright  2025 Blindside Networks\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getString} from 'core/str';\n\n/**\n * Initializes pagination functionality for the recordings table.\n */\nexport const setupPagination = () => {\n    const tableContainer = document.querySelector(\".mod_bigbluebuttonbn_recordings_table\");\n    if (!tableContainer) {\n        return;\n    }\n\n    const rows = Array.from(tableContainer.querySelectorAll(\".row.mb-3.align-items-center\"));\n\n    // Select pagination buttons.\n    const firstPageBtn = document.getElementById(\"firstPage\");\n    const prevPageBtn = document.getElementById(\"prevPage\");\n    const nextPageBtn = document.getElementById(\"nextPage\");\n    const lastPageBtn = document.getElementById(\"lastPage\");\n    const pageSelect = document.getElementById(\"pageSelect\");\n\n    if (!firstPageBtn || !prevPageBtn || !nextPageBtn || !lastPageBtn || !pageSelect) {\n        return;\n    }\n\n    const itemsPerPage = 10;\n    let currentPage = 1;\n    let totalPages = Math.ceil(rows.length / itemsPerPage);\n\n    /**\n     * Updates the visibility of table rows based on the selected page.\n     * @param {number} page - The current page to display.\n     */\n    function renderTable(page) {\n        let visibleIndex = 0;\n\n        rows.forEach(row => {\n            if (row.dataset.filtered === \"false\") {\n                row.style.display = \"none\";\n                return;\n            }\n\n            const start = (page - 1) * itemsPerPage;\n            const end = page * itemsPerPage;\n\n            if (visibleIndex >= start && visibleIndex < end) {\n                row.style.display = \"flex\";\n            } else {\n                row.style.display = \"none\";\n            }\n\n            visibleIndex++;\n        });\n    }\n\n    /**\n     * Updates pagination buttons and dropdown.\n     */\n    async function updatePaginationControls() {\n        const filteredRows = rows.filter(row => row.dataset.filtered !== \"false\");\n        pageSelect.innerHTML = \"\";\n\n        let pageString;\n        try {\n            pageString = await getString('view_recording_yui_page', 'bigbluebuttonbn');\n        } catch (error) {\n            pageString = \"Page\";\n        }\n\n        totalPages = Math.max(1, Math.ceil(filteredRows.length / itemsPerPage));\n\n        for (let i = 1; i <= totalPages; i++) {\n            let option = document.createElement(\"option\");\n            option.value = i;\n            option.textContent = `${pageString} ${i}`;\n            if (i === currentPage) {\n                option.selected = true;\n            }\n            pageSelect.appendChild(option);\n        }\n\n        firstPageBtn.disabled = (currentPage === 1);\n        prevPageBtn.disabled = (currentPage === 1);\n        nextPageBtn.disabled = (currentPage === totalPages);\n        lastPageBtn.disabled = (currentPage === totalPages);\n    }\n\n    /**\n     * Event listeners for first page in pagination controls.\n     */\n    firstPageBtn.addEventListener(\"click\", () => {\n        currentPage = 1;\n        renderTable(currentPage);\n        updatePaginationControls();\n    });\n\n    /**\n     * Event listeners for previous page in pagination controls.\n     */\n    prevPageBtn.addEventListener(\"click\", () => {\n        if (currentPage > 1) {\n            currentPage--;\n            renderTable(currentPage);\n            updatePaginationControls();\n        }\n    });\n\n    /**\n     * Event listeners for next page in pagination controls.\n     */\n    nextPageBtn.addEventListener(\"click\", () => {\n        if (currentPage < totalPages) {\n            currentPage++;\n            renderTable(currentPage);\n            updatePaginationControls();\n        }\n    });\n\n    /**\n     * Event listeners for last page in pagination controls.\n     */\n    lastPageBtn.addEventListener(\"click\", () => {\n        currentPage = totalPages;\n        renderTable(currentPage);\n        updatePaginationControls();\n    });\n\n    /**\n     * Event listeners for page selection dropdown.\n     */\n    pageSelect.addEventListener(\"change\", (e) => {\n        currentPage = parseInt(e.target.value, 10);\n        renderTable(currentPage);\n        updatePaginationControls();\n    });\n\n    /**\n     * Expose pagination update function to be used by search.\n     */\n    window.updatePagination = () => {\n        currentPage = 1;\n        renderTable(currentPage);\n        updatePaginationControls();\n    };\n\n    // Default all rows to visible and flagged as included.\n    rows.forEach(row => {\n        row.dataset.filtered = \"true\";\n        row.style.display = \"flex\";\n    });\n\n    renderTable(currentPage);\n    updatePaginationControls();\n};\n"],"names":["tableContainer","document","querySelector","rows","Array","from","querySelectorAll","firstPageBtn","getElementById","prevPageBtn","nextPageBtn","lastPageBtn","pageSelect","currentPage","totalPages","Math","ceil","length","renderTable","page","visibleIndex","forEach","row","dataset","filtered","style","display","start","end","updatePaginationControls","filteredRows","filter","pageString","innerHTML","error","max","i","option","createElement","value","textContent","selected","appendChild","disabled","addEventListener","e","parseInt","target","window","updatePagination"],"mappings":"oNA4B+B,WACrBA,eAAiBC,SAASC,cAAc,6CACzCF,4BAICG,KAAOC,MAAMC,KAAKL,eAAeM,iBAAiB,iCAGlDC,aAAeN,SAASO,eAAe,aACvCC,YAAcR,SAASO,eAAe,YACtCE,YAAcT,SAASO,eAAe,YACtCG,YAAcV,SAASO,eAAe,YACtCI,WAAaX,SAASO,eAAe,mBAEtCD,cAAiBE,aAAgBC,aAAgBC,aAAgBC,uBAKlEC,YAAc,EACdC,WAAaC,KAAKC,KAAKb,KAAKc,OAFX,aAQZC,YAAYC,UACbC,aAAe,EAEnBjB,KAAKkB,SAAQC,SACoB,UAAzBA,IAAIC,QAAQC,qBACZF,IAAIG,MAAMC,QAAU,cAIlBC,MAjBO,IAiBER,KAAO,GAChBS,IAlBO,GAkBDT,KAGRG,IAAIG,MAAMC,QADVN,cAAgBO,OAASP,aAAeQ,IACpB,OAEA,OAGxBR,iCAOOS,iCACLC,aAAe3B,KAAK4B,QAAOT,KAAgC,UAAzBA,IAAIC,QAAQC,eAGhDQ,WAFJpB,WAAWqB,UAAY,OAInBD,iBAAmB,kBAAU,0BAA2B,mBAC1D,MAAOE,OACLF,WAAa,OAGjBlB,WAAaC,KAAKoB,IAAI,EAAGpB,KAAKC,KAAKc,aAAab,OA5C/B,SA8CZ,IAAImB,EAAI,EAAGA,GAAKtB,WAAYsB,IAAK,KAC9BC,OAASpC,SAASqC,cAAc,UACpCD,OAAOE,MAAQH,EACfC,OAAOG,sBAAiBR,uBAAcI,GAClCA,IAAMvB,cACNwB,OAAOI,UAAW,GAEtB7B,WAAW8B,YAAYL,QAG3B9B,aAAaoC,SAA4B,IAAhB9B,YACzBJ,YAAYkC,SAA4B,IAAhB9B,YACxBH,YAAYiC,SAAY9B,cAAgBC,WACxCH,YAAYgC,SAAY9B,cAAgBC,WAM5CP,aAAaqC,iBAAiB,SAAS,KACnC/B,YAAc,EACdK,YAAYL,aACZgB,8BAMJpB,YAAYmC,iBAAiB,SAAS,KAC9B/B,YAAc,IACdA,cACAK,YAAYL,aACZgB,+BAORnB,YAAYkC,iBAAiB,SAAS,KAC9B/B,YAAcC,aACdD,cACAK,YAAYL,aACZgB,+BAORlB,YAAYiC,iBAAiB,SAAS,KAClC/B,YAAcC,WACdI,YAAYL,aACZgB,8BAMJjB,WAAWgC,iBAAiB,UAAWC,IACnChC,YAAciC,SAASD,EAAEE,OAAOR,MAAO,IACvCrB,YAAYL,aACZgB,8BAMJmB,OAAOC,iBAAmB,KACtBpC,YAAc,EACdK,YAAYL,aACZgB,4BAIJ1B,KAAKkB,SAAQC,MACTA,IAAIC,QAAQC,SAAW,OACvBF,IAAIG,MAAMC,QAAU,UAGxBR,YAAYL,aACZgB"}